model:
    #channels: [32, 32, 16, 30, 30, 24, 55, 55, 24, 58, 58, 32, 98, 98, 32, 120, 120, 32, 58, 58, 64, 236, 236, 64, 238, 238, 64, 255, 255, 64, 156, 156, 96, 288, 288, 96, 243, 243, 96, 190, 190, 160, 490, 490, 160, 418, 418, 160, 341, 341, 320, 952]
    channels: [64, 64, 128, 128, 256, 256, 256, 512, 512, 512, 512, 512, 512]
    backbone:
      # [n, stride, c_in, c_out, [expand_ratio], channel_search, [op]]
      conv_stem: [2, 1, 3, 64, [], False, ['conv3x3']]
      maxp1: [1, 2, 1, 1, [], False, ['maxpool2x2']]
      stage1: [2, 1, 64, 128, [], False, ['conv3x3']]
      maxp2: [1, 2, 1, 1, [], False, ['maxpool2x2']]
      stage2: [3, 1, 128, 256, [], False, ['conv3x3']]
      maxp3: [1, 2, 1, 1, [], False, ['maxpool2x2']]
      stage3: [3, 1, 256, 512, [], False, ['conv3x3']]
      maxp4: [1, 2, 1, 1, [], False, ['maxpool2x2']]
      stage4: [3, 1, 512, 512, [], False, ['conv3x3']]
      final_pooling: True
    head:
      linear1:
        dim_in: 512
        dim_out: 10
    loss_type: 'softmax'
    width_multiplier: 1

retrain:
    flag: True
    strategy:
        max_iter:  196000 #196000  #500个epoch
        max_iter_keeptrain: 41000 #41000 100个epoch  for cifar10,390.625一个epoch
        optimizer:
            type: 'SGD'
            lr: 0.1  # in proxyless: 0.0125 per gpu
            weight_decay: 0.0001
            momentum: 0.9
            nesterov: False
        resume: False
        lr_scheduler:
            #base_lr: 0.12
            lr_steps: [62500, 93750, 117190] # 160 epoch 62500, 240 epoch 93750, 300 epoch 117190
            lr_mults: [0.1, 0.1, 0.1]
            warmup_steps: 1955  # warmup epochs: 5 steps=5*391=1955
            warmup_strategy: 'gradual'
            warmup_lr: 0.1
            decay_stg: 'step' #'cosine'
            # final lr in cosine strategy
            alpha: 0.00001
            # how many iterations it takes to decay lr to 'alpha'
            decay_step: 186000
        bin_search: True
        bin_config:
            min_bin: 1
            max_bin: 32
            P_train: 0.5
            skip_list: [[]]    # mobilenetv2

        task_type: 'imagenet'
        snapshot_freq: 1000 #1000
        print_freq: 100
        basic_path: '../generalNAS_exp/cifar10_VGG'
        save_path: '../generalNAS_exp/cifar10_VGG/retrain'

    data:
        workers: 8  # dataloader worker num
        task_type: 'imagenet'
        data_type: 'ssst'
        scatter_mode: False
        final_height: 32
        final_width: 32
        final_channel: 3
        augmentation:
            padding:
                padding: 4
            random_crop:
                output_size: 32
            affine:
                mirror:
                    mirror_prob: 0.5
            # normalize
            normalize:
                normalize_type: 'mean_std'
                mean: [132.776, 134.11, 135.48] #[0.53129727, 0.5259391, 0.52069134] * 255?
                std: [71.3277279, 82.09654848, 73.7925273] #[0.28938246, 0.28505746, 0.27971658]*255?
        imagenet:
            type: 'classification'
            task: 'imagenet'
            json_path: '/mnt/lustre/suxiu/dataset/cifar_10/train.json'
            prefix: '/mnt/lustre/suxiu/dataset/cifar_10/train'
            batch_size: 16 # for single gpu

sample:
    flag: True
    epoch: 1  #sample epoch
    flops_constrant: 0.40  #330000000, changed to percent
    sampler:
        type: 'evolution'
        Deduce_P: 0.01
        kwargs:
            log_path: '../generalNAS_exp/imagenet_greedynas_nopool_search'
            Sample_test_num: None # del this function, can be added in the future
            cal_time: 3 #cal time of cifar10 or imagenet
            search_num: 10 #10
            sample_num: 1
            pop_size: 60 #50
            n_gens: 40 #20
            extension_loc: [[]]

    strategy:
        task_type: 'imagenet-test'
        snapshot_freq: 100
        print_freq: 100
        use_basic_path: True
        save_path: '../generalNAS_exp/imagenet_mbnetv2_retrain/greedysample' #meiyong？  '../generalNAS_exp/imagenet_greedynas_nopool_search'
        load_name: None #'iter_70000_ckpt.pth.tar'  #epoch == 1 and load_name == None for save_path and load_name useful

    data:
        workers: 8  # dataloader worker num
        task_type: 'imagenet-test'
        data_type: 'ssst'
        scatter_mode: False
        final_height: 32
        final_width: 32
        final_channel: 3
        augmentation:
            normalize:
                normalize_type: 'mean_std'
                mean: [132.776, 134.11, 135.48] #[0.53129727, 0.5259391, 0.52069134] * 255?
                std: [71.3277279, 82.09654848, 73.7925273] #[0.28938246, 0.28505746, 0.27971658]*255?
        imagenet:
            type: 'classification'
            task: 'imagenet'
            json_path: '/mnt/lustre/suxiu/dataset/cifar_10/test.json'
            prefix: '/mnt/lustre/suxiu/dataset/cifar_10/test'
            batch_size: 128 # for single gpu

final_train:
    flag: True
    train_mode: 'retrain'  #it can be retrain or finetune
    # FLOPs: 333,598,784 FLOPs
    strategy:
      retrain:
        max_iter: 196000 #196000
        optimizer:
            type: 'SGD'
            lr: 0.1  # in proxyless: 0.0125 per gpu
            weight_decay: 0.00005
            momentum: 0.9
            nesterov: False
        resume: False
        lr_scheduler:
            #base_lr: 0.12
            lr_steps: [62500, 93750, 117190]
            lr_mults: [0.1, 0.1, 0.1]
            warmup_steps: 1955  # warmup epochs: 5 steps=5*2503=12515
            warmup_strategy: 'gradual'
            warmup_lr: 0.1
            decay_stg: 'step'  #'cosine'
            # final lr in cosine strategy
            alpha: 0.00001
            # how many iterations it takes to decay lr to 'alpha'
            decay_step: 186000
        task_type: 'imagenet'
        snapshot_freq: 400
        print_freq: 100
        use_basic_path: True
        save_path: '../generalNAS_exp/imagenet_mbnetv2_retrain/final_train'

      finetune:
        max_iter: 196000 #196000
        optimizer:
          type: 'SGD'
          lr: 0.1  # in proxyless: 0.0125 per gpu
          weight_decay: 0.00005
          momentum: 0.9
          nesterov: False
        resume: False
        lr_scheduler:
          #base_lr: 0.12
          lr_steps: [62500, 93750, 117190]
          lr_mults: [0.1, 0.1, 0.1]
          warmup_steps: 1955  # warmup epochs: 5 steps=5*2503=12515
          warmup_strategy: 'gradual'
          warmup_lr: 0.1
          decay_stg: 'step'
          # final lr in cosine strategy
          alpha: 0.00001
          # how many iterations it takes to decay lr to 'alpha'
          decay_step: 186000
        task_type: 'imagenet'
        snapshot_freq: 400
        print_freq: 100
        use_basic_path: True
        save_path: '../generalNAS_exp/imagenet_mbnetv2_retrain/final_train'

    data:
        workers: 4  # dataloader worker num
        task_type: 'imagenet'
        data_type: 'ssst'
        scatter_mode: False
        final_height: 32
        final_width: 32
        final_channel: 3
        augmentation:
            padding:
                padding: 4
            random_crop:
                output_size: 32
            affine:
                mirror:
                    mirror_prob: 0.5

            # normalize
            normalize:
                normalize_type: 'mean_std'
                mean: [132.776, 134.11, 135.48] #[0.53129727, 0.5259391, 0.52069134] * 255?
                std: [71.3277279, 82.09654848, 73.7925273] #[0.28938246, 0.28505746, 0.27971658]*255?
        imagenet:
            type: 'classification'
            task: 'imagenet'
            json_path: '/mnt/lustre/suxiu/dataset/cifar_10/train.json'
            prefix: '/mnt/lustre/suxiu/dataset/cifar_10/train'
            batch_size: 16 # for single gpu



test:
    flag: True
    strategy:
        task_type: 'imagenet-test'
        snapshot_freq: 400
        print_freq: 400
        use_basic_path: True
        save_path: '../generalNAS_exp/imagenet_mbnetv2_retrain/final_train/checkpoint'
        load_iter: 138000 #140000
        start: 138000 #139000
        end: 196000 #196000
        strip: 400

    data:
        workers: 8  # dataloader worker num
        task_type: 'imagenet-test'
        data_type: 'ssst'
        scatter_mode: False
        final_height: 32
        final_width: 32
        final_channel: 3
        augmentation:
            normalize:
                normalize_type: 'mean_std'
                mean: [132.776, 134.11, 135.48] #[0.53129727, 0.5259391, 0.52069134] * 255?
                std: [71.3277279, 82.09654848, 73.7925273] #[0.28938246, 0.28505746, 0.27971658]*255?
        imagenet:
            type: 'classification'
            task: 'imagenet'
            json_path: '/mnt/lustre/suxiu/dataset/cifar_10/test.json'
            prefix: '/mnt/lustre/suxiu/dataset/cifar_10/test'
            batch_size: 8 # for single gpu

