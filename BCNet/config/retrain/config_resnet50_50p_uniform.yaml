retrain:
    flag: True
    # FLOPs: 333,598,784 FLOPs
    model:
      channels: [44, 44, 44, 179, 179, 44, 44, 179, 44, 44, 179, 89, 89, 359, 359, 89, 89, 359, 89, 89, 359, 89, 89, 359, 179, 179, 718, 718, 179, 179, 718, 179, 179, 718, 179, 179, 718, 179, 179, 718, 179, 179, 718, 359, 359, 1437, 1437, 359, 359, 1437, 359, 359, 1437] 
      backbone:
        # [n, stride, c_in, c_out, [expand_ratio], channel_search, [op]]
        conv_stem: [1, 2, 3, 64, [], False, ['conv7x7']]
        maxp: [1, 2, 1, 1, [], False, ['maxpool3x3']]
        stage1: [3, 2, 16, 24, [6], False, ['nr_3x3']]
        stage2: [4, 2, 24, 32, [6], False, ['nr_3x3']]
        stage3: [6, 2, 32, 64, [6], False, ['nr_3x3']]
        stage4: [3, 2, 64, 96, [6], False, ['nr_3x3']]
        final_pooling: True
      head:
        linear1:
          dim_in: 1280
          dim_out: 1000
      loss_type: 's-softmax'

    strategy:
        max_iter: 550000
        optimizer:
            type: 'SGD'
            lr: 0.1  # in proxyless: 0.0125 per gpu
            weight_decay: 0.0001
            momentum: 0.9
            nesterov: True
        resume: False
        lr_scheduler:
            #base_lr: 0.12
            lr_steps: [200240, 400480, 500600]
            lr_mults: [0.1, 0.1, 0.1]
            warmup_steps: 0  # warmup epochs: 5 steps=5*2503=12515
            warmup_strategy: 'gradual'
            warmup_lr: 0.2
            decay_stg: 'step'
            # final lr in cosine strategy
            alpha: 0.00001
            # how many iterations it takes to decay lr to 'alpha'
            decay_step: 730000

        task_type: 'imagenet'
        snapshot_freq: 200
        print_freq: 20
        save_path: '../generalNAS_exp/imagenet_resnet50_50p_uniform'

    data:
        workers: 8  # dataloader worker num
        task_type: 'imagenet'
        data_type: 'ssst'
        scatter_mode: False
        final_height: 224
        final_width: 224
        final_channel: 3
        augmentation:
            rand_resize:
                output_size: 224
                scale: [0.08, 1.0]
                ratio: [0.75, 1.3333333333]
            affine:
                mirror:
                    mirror_prob: 0.5
            # resize
            resize:
                output_size: [224, 224]
            # normalize
            normalize:
                normalize_type: 'mean_std'
                mean: [123.675, 116.28, 103.53]
                std: [58.395, 57.120, 57.375]
        imagenet:
            type: 'classification'
            task: 'imagenet'
            json_path: '/mnt/lustre/suxiu/dataset/imagenet/imagenet.json'
            prefix: '/mnt/lustre/share/images/train'
            batch_size: 32 # for single gpu

test:
    flag: True
    model:
      channels: [44, 44, 44, 179, 179, 44, 44, 179, 44, 44, 179, 89, 89, 359, 359, 89, 89, 359, 89, 89, 359, 89, 89, 359, 179, 179, 718, 718, 179, 179, 718, 179, 179, 718, 179, 179, 718, 179, 179, 718, 179, 179, 718, 359, 359, 1437, 1437, 359, 359, 1437, 359, 359, 1437] 
      backbone:
        conv_stem: [1, 2, 3, 64, [], False, ['conv7x7']]
        maxp: [1, 2, 1, 1, [], False, ['maxpool3x3']]
        stage1: [3, 2, 16, 24, [6], False, ['nr_3x3']]
        stage2: [4, 2, 24, 32, [6], False, ['nr_3x3']]
        stage3: [6, 2, 32, 64, [6], False, ['nr_3x3']]
        stage4: [3, 2, 64, 96, [6], False, ['nr_3x3']] 
        final_pooling: True
      head:
        linear1:
          dim_in: 1280
          dim_out: 1000
      loss_type: 's-softmax'

    strategy:
        task_type: 'imagenet-test'
        snapshot_freq: 2000
        print_freq: 20
        save_path: '../generalNAS_exp/imagenet_resnet50_50p_uniform/checkpoint'
        load_iter: 540000
        start: 540000
        end: 552000
        strip: 200

    data:
        workers: 8  # dataloader worker num
        task_type: 'imagenet-test'
        data_type: 'ssst'
        scatter_mode: False
        final_height: 224
        final_width: 224
        final_channel: 3
        augmentation:
            resize:
                output_size: 256
            center_crop:
                output_size: 224
            normalize:
                normalize_type: 'mean_std'
                mean: [123.675, 116.28, 103.53]
                std: [58.395, 57.120, 57.375]
        imagenet:
            type: 'classification'
            task: 'imagenet'
            json_path: '/mnt/lustre/suxiu/dataset/imagenet/imagenet_val.json'
            prefix: '/mnt/lustre/share/images/val'
            batch_size: 32 # for single gpu

